function createCalendarEventWithAvailability() {

// update to phrase and adjust time here
  var triggerPhrase = 'your trigger phrase';
  var calendarId = 'primary';
  var zoomLink = 'https://zoom.us/link-to-meeting';  // Replace with your Zoom link template
  var eventTitle = 'Meeting Event';
  var durationMinutes = 60;  // Event duration: 1 hour

  var threads = GmailApp.search('is:unread');
  for (var i = 0; i < threads.length; i++) {
    var messages = threads[i].getMessages();
    for (var j = 0; j < messages.length; j++) {
      var message = messages[j];
      var body = message.getPlainBody();

      if (body.toLowerCase().includes(triggerPhrase.toLowerCase())) {
        var startDateTime = findAvailableTimeSlot(durationMinutes);
        if (startDateTime) {
          var endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60 * 1000);

          var event = {
            'summary': eventTitle,
            'start': {
              'dateTime': startDateTime.toISOString(),
            },
            'end': {
              'dateTime': endDateTime.toISOString(),
            },
            'description': 'Zoom Link: ' + zoomLink,
          };

          Calendar.Events.insert(event, calendarId);
          message.markRead();
        }
      }
    }
  }
}

function findAvailableTimeSlot(durationMinutes) {
  var calendar1Id = 'primary';
  var calendar2Id = 'your-other-calendar-id';

  var now = new Date();
  var startDateTime = new Date(now.getTime() + 24 * 60 * 60 * 1000);  // Start searching from tomorrow

  var calendar1Events = Calendar.Events.list(calendar1Id, {
    timeMin: startDateTime.toISOString(),
    singleEvents: true,
    orderBy: 'startTime',
  }).items;

  var calendar2Events = Calendar.Events.list(calendar2Id, {
    timeMin: startDateTime.toISOString(),
    singleEvents: true,
    orderBy: 'startTime',
  }).items;

  var busyTimes = [];

  calendar1Events.forEach(function (event) {
    busyTimes.push({
      start: new Date(event.start.dateTime),
      end: new Date(event.end.dateTime),
    });
  });

  calendar2Events.forEach(function (event) {
    busyTimes.push({
      start: new Date(event.start.dateTime),
      end: new Date(event.end.dateTime),
    });
  });

  var busyTimesSorted = busyTimes.sort(function (a, b) {
    return a.start - b.start;
  });

  var availableTimeSlot = null;

  for (var i = 1; i < busyTimesSorted.length; i++) {
    var previousEnd = busyTimesSorted[i - 1].end;
    var currentStart
